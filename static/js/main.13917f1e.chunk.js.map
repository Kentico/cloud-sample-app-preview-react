{"version":3,"sources":["constants/routePaths.ts","authentication/authOptions.ts","authentication/WebAuth.ts","constants/localStorageKeys.ts","components/Callback.tsx","context/AuthContext.tsx","utils/routeTransitionUtils.ts","enums/LoadingStatus.ts","components/ErrorPage.tsx","models/Article.ts","models/LandingPage.ts","models/Product.ts","repositories/contentItemRepository.ts","context/AppContext.tsx","components/NavigationBar.tsx","components/PageContent.tsx","components/Product/ProductDetailsPage.tsx","components/Product/ProductCard.tsx","components/Product/ProductsPage.tsx","components/WelcomePage.tsx","App.tsx","serviceWorker.js","utils/ajax.ts","utils/restProvider.ts","repositories/previewApiKeyRepository.ts","utils/projectIdUtil.ts","utils/previewApiKeyUtils.ts","context/AppContextInitialization.tsx","index.tsx"],"names":["DeployedProjectRootRoute","concat","process","CallbackRoute","ProjectRoute","ProductsRoute","ProductDetailsRoute","authOptions","domain","clientID","audience","redirectUri","responseType","scope","logoutOptions","returnTo","WebAuth","_this","this","Object","classCallCheck","webAuth","auth0","login","authorize","silentLogin","localStorage","setItem","window","location","pathname","prompt","logout","getRedirectUri","redirectUriFromStorage","getItem","removeItem","startsWith","slice","handleAuthentication","onSuccessLogin","onFailedLogin","parseHash","err","authResult","accessToken","idToken","expiresAt","expiresIn","Date","getTime","isAuthenticated","Callback","react_default","a","createElement","defaultAuthContext","isLoggedIn","context","React","createContext","AuthContextProvider","Provider","AuthContextConsumer","Consumer","AuthContext","props","possibleConstructorReturn","getPrototypeOf","call","isAuthUrlHash","hash","test","handleAuthCallback","_ref","setState","history","push","console","warn","state","_this2","objectSpread","react_router","from","to","path","render","Callback_Callback","value","children","Component","AuthContextWithRouter","withRouter","buildPath","route","params","compile","LoadingStatus","ErrorPageType","ArticleExampleContentType","_ContentItem","_getPrototypeOf2","_len","arguments","length","args","Array","_key","apply","body","title","url","inherits","ContentItem","LandingPageExampleContentType","propertyResolver","fieldName","productList","ProductExampleContentType","description","name","image","taxonomyCategorizingTargetAudience","deliveryClient","ensureDeliveryClient","projectId","previewApiKey","DeliveryClient","enablePreviewMode","enableAdvancedLogging","basePreviewUrl","typeResolvers","TypeResolver","getAllArticles","items","type","toPromise","then","response","catch","reason","log","getProductsPage","defaultAppContext","dataLoadingStatus","NotLoaded","previewApiKeyLoadingStatus","projectIdLoadingStatus","pages","products","loadWelcomePage","loadProducts","setProjectId","setLoadingStatus","setProjectIdLoadingStatus","setPreviewApiKey","setPreviewApiKeyLoadingStatus","AppContextProvider","AppContextConsumer","AppContext","_React$PureComponent","_dataPollingTimer","_setDataPolling","func","clearInterval","setInterval","loadingStatus","_loadWelcomePageData","asyncToGenerator","regenerator_default","mark","_callee","articles","wrap","_context","prev","next","sent","stop","_callee2","_context2","_loadProductsData","_callee3","productsPage","_context3","_callee4","_context4","createClass","key","_this$state","contextValue","PureComponent","NavigationBar","appContext","authContext","className","react_router_dom","onClick","PageContent","Fragment","ProductDetailsPage","init","product","pictureUrl","assets","PageContent_PageContent","alt","src","dangerouslySetInnerHTML","__html","getHtml","ProductDetailsPageConnected","match","ProductDetailsPage_ProductDetailsPage","filter","system","codename","productId","ProductCard","ProductsPage","_this$props","map","ProductCard_ProductCard","id","ProductsPageConnected","ProductsPage_ProductsPage","WelcomePage","page","WelcomePageConnected","WelcomePage_WelcomePage","App","component","exact","Boolean","hostname","MissingProjectIdErrorPageContent","href","UnableToGetPreviewApiKeyErrorPageContent","ErrorPage","MissingProjectId","ErrorPage_MissingProjectIdErrorPageContent","UnableToGetPreviewApiKey","ErrorPage_UnableToGetPreviewApiKeyErrorPageContent","addCustomHeaders","request","customHeaders","keys","forEach","header","setRequestHeader","getNewEmptyRequest","XMLHttpRequest","parseResponse","responseText","JSON","parse","restProvider","ajax","makeRequest","httpVerb","data","requestContext","headers","defaultHeaders","newHeaders","authToken","Authorization","appInstanceId","getHeaders","Content-type","requestBody","stringify","prepareDataForSend","post","validStatusCodes","indexOf","status","createRestProvider","withCredentials","Promise","resolve","open","onreadystatechange","readyState","send","requestFile","upload","formData","uploadProgressCallback","addEventListener","createAjaxWithCredentials","getPreviewApiKey","getProjectIdFromUrl","routeToMatch","matchPath","createLoadPreviewApiKey","api_key","AppContextInitialization","prevProps","loadApplicationData","_this$props$appContex","Failed","ErrorPage_ErrorPage","Finished","AppContextInitializationWithRouter","deps","fetchData","loadPreviewApikey","projectIdFromUrl","InProgress","AppContextInitialization_AppContextInitialization","assign","ReactDOM","basename","AppContext_AppContext","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.13917f1e.chunk.js","sourcesContent":["export const uuidPattern = '[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}';\n\nexport const DeployedProjectRootRoute = `${process.env.REACT_APP_PROJECT_ROUTE}`;\n\nexport const RootRoute = '/';\nexport const CallbackRoute = `${RootRoute}callback`;\nexport const LogoutRoute = `${RootRoute}logout`;\n\nexport const ProjectRoute = `${RootRoute}:projectId(${uuidPattern})`;\nexport const ProductsRoute = `${ProjectRoute}/products`;\nexport const ProductDetailsRoute = `${ProductsRoute}/:productId`;\n\nexport const ErrorRoute = `${RootRoute}error`;\n\nexport type ProjectRouteParams = {\n  readonly projectId: string;\n};\n\nexport type ProductDetailsRouteParams = ProjectRouteParams & {\n  readonly productId: string;\n}\n","import {\n  AuthOptions,\n  LogoutOptions,\n} from 'auth0-js';\n\nexport const authOptions: AuthOptions = {\n  domain: process.env.REACT_APP_AUTH_DOMAIN!,\n  clientID: process.env.REACT_APP_AUTH_CLIENT_ID!,\n  audience: 'https://app.kenticocloud.com/',\n  redirectUri: process.env.REACT_APP_AUTH_REDIRECT_URL,\n  responseType: 'token id_token',\n  scope: 'openid',\n};\n\nexport const logoutOptions: LogoutOptions = {\n  returnTo: process.env.REACT_APP_AUTH_LOGOUT_RETURN_TO,\n};\n","import auth0 from 'auth0-js';\nimport {\n  authOptions,\n  logoutOptions,\n} from './authOptions';\nimport {Auth0RedirectUriStorageKey} from \"../constants/localStorageKeys\";\nimport {RootRoute} from \"../constants/routePaths\";\n\nexport interface IAccessToken {\n  readonly accessToken: string;\n  readonly expiresAt: number;\n}\n\nexport interface IWebAuth {\n  readonly login: () => void;\n  readonly logout: () => void;\n  readonly silentLogin: () => void;\n  readonly handleAuthentication: (onSuccessLogin: (accessToken: IAccessToken, redirectUri: string) => void, onFailedLogin: () => void) => void;\n  readonly isAuthenticated: (expiresIn: number) => boolean;\n}\n\nexport class WebAuth implements IWebAuth {\n  private webAuth = new auth0.WebAuth(authOptions);\n\n  login = (): void => {\n    this.webAuth.authorize();\n  };\n\n  silentLogin = (): void => {\n    localStorage.setItem(Auth0RedirectUriStorageKey, window.location.pathname);\n    this.webAuth.authorize({\n      prompt: 'none',\n    });\n  };\n\n  logout = (): void => {\n    this.webAuth.logout(logoutOptions);\n  };\n\n  private getRedirectUri = () => {\n    const redirectUriFromStorage = localStorage.getItem(Auth0RedirectUriStorageKey);\n    localStorage.removeItem(Auth0RedirectUriStorageKey);\n    const redirectUri = redirectUriFromStorage ? redirectUriFromStorage : RootRoute;\n\n    // todo make nicer\n    if (redirectUri.startsWith(\"/cloud-sample-app-preview-react\")) {\n      return redirectUri.slice(31);\n    }\n\n    return redirectUri;\n  };\n\n  handleAuthentication = (onSuccessLogin: (accessToken: IAccessToken, redirectUri: string) => void, onFailedLogin: () => void): void => {\n    this.webAuth.parseHash((err, authResult) => {\n      if (authResult && authResult.accessToken && authResult.idToken) {\n        const accessToken: IAccessToken = {\n          accessToken: authResult.accessToken as string,\n          expiresAt: ((authResult.expiresIn || 0) * 1000) + new Date().getTime(),\n        };\n        const redirectUri = this.getRedirectUri();\n        onSuccessLogin(accessToken, redirectUri);\n      }\n      else if (err) {\n        onFailedLogin();\n        this.login();\n      }\n    });\n  };\n\n  isAuthenticated = (expiresAt: number): boolean => {\n    // Check whether the current time is past the access token's expiry time\n    return new Date().getTime() < expiresAt;\n  };\n}\n","export const Auth0RedirectUriStorageKey = 'redirectUri';\r\n","import React from 'react';\r\n\r\nexport const Callback = (): JSX.Element => {\r\n    return (\r\n      <div>\r\n        <h1>Loading...</h1>\r\n      </div>\r\n    );\r\n};\r\n","import React from 'react';\nimport {IAccessToken, WebAuth} from \"../authentication/WebAuth\";\nimport {Redirect, Route, RouteComponentProps, Switch, withRouter} from \"react-router\";\nimport {Callback} from \"../components/Callback\";\nimport {CallbackRoute, RootRoute} from \"../constants/routePaths\";\n\ninterface IAuthContextState {\n  readonly accessToken: string;\n  readonly expiresAt: number;\n  readonly isLoggedIn: boolean;\n}\n\nexport interface IAuthContext extends IAuthContextState {\n  readonly logout: () => void;\n}\n\nconst defaultAuthContext: IAuthContext = {\n  accessToken: '',\n  expiresAt: 0,\n  isLoggedIn: false,\n  logout: () => undefined,\n};\n\nconst context = React.createContext<IAuthContext>(defaultAuthContext);\nconst AuthContextProvider = context.Provider;\n\nexport const AuthContextConsumer = context.Consumer;\n\nclass AuthContext extends React.Component<RouteComponentProps, IAuthContextState> {\n\n  private webAuth = new WebAuth();\n\n  constructor(props: RouteComponentProps) {\n    super(props);\n\n    this.state = {\n      accessToken: '',\n      isLoggedIn: false,\n      expiresAt: 0,\n    };\n  }\n\n  private isAuthUrlHash = (hash: string): boolean => /access_token|id_token|error/.test(hash);\n\n  handleAuthCallback = ({ location }: any) => {\n    if (this.isAuthUrlHash(location.hash)) {\n      this.webAuth.handleAuthentication(this.onSuccessLogin, this.onFailedLogin);\n    }\n  };\n\n  onSuccessLogin = (accessToken: IAccessToken, redirectUri: string) => {\n    this.setState({\n      accessToken: accessToken.accessToken,\n      expiresAt: accessToken.expiresAt,\n      isLoggedIn: true,\n    });\n    this.props.history.push(redirectUri);\n  };\n\n  onFailedLogin = () => {\n    console.warn('on failed login');\n  };\n\n  componentDidMount() {\n    const {silentLogin} = this.webAuth;\n    if (!this.isAuthUrlHash(window.location.hash)) {\n      silentLogin();\n    }\n  }\n\n  render() {\n    const context: IAuthContext = {\n      ...this.state,\n      logout: this.webAuth.logout,\n    };\n\n    const { isLoggedIn } = this.state;\n\n    /* TODO: If silent login is processing, could also be shown \"InProgress...\" to avoid blinking the browser screen */\n\n    return (\n      <Switch>\n        {isLoggedIn ?\n          <Redirect\n            from={CallbackRoute}\n            to={RootRoute}\n          /> :\n          <Route\n            path={CallbackRoute}\n            render={props => {\n              this.handleAuthCallback(props);\n              return <Callback />;\n            }}\n          />\n        }\n\n        {isLoggedIn && (\n          <Route render={() => (\n            <AuthContextProvider value={context}>\n              {this.props.children}\n            </AuthContextProvider>\n          )}/>\n        )}\n      </Switch>\n    )\n  }\n}\n\nconst AuthContextWithRouter = withRouter(AuthContext);\nexport { AuthContextWithRouter as AuthContext };\n","import {compile} from \"path-to-regexp\";\r\n\r\ninterface IDictionary<T> {\r\n  readonly [key: string]: T | undefined;\r\n}\r\n\r\nexport function buildPath<TRouteParams = IDictionary<string>>(route: string, params: TRouteParams): string {\r\n  return compile(route)(params as any as object);\r\n}\r\n","export enum LoadingStatus {\r\n  NotLoaded = 'notLoaded',\r\n  InProgress = 'inProgress',\r\n  Finished = 'finished',\r\n  Failed = 'failed',\r\n}\r\n","import React from 'react';\nimport {RootRoute} from \"../constants/routePaths\";\n\nexport enum ErrorPageType {\n  MissingProjectId = 'missingProjectId',\n  UnableToGetPreviewApiKey = 'unableToGetPreviewApiKey',\n}\n\ninterface IErrorPageProps {\n  readonly type: ErrorPageType;\n}\n\nconst MissingProjectIdErrorPageContent: React.FunctionComponent = () => (\n  <>\n    <p>Didn't you forget to provide Project Id in url? E.g. <i>https://kentico.github.io/cloud-sample-app-preview-react/your_project_id</i></p>\n    <p>Default: <a href={`${RootRoute}cf6c9bb2-6d7e-00f8-a84a-b8042d1209c6`}>cf6c9bb2-6d7e-00f8-a84a-b8042d1209c6</a></p>\n  </>\n);\n\nconst UnableToGetPreviewApiKeyErrorPageContent: React.FunctionComponent = () => (\n  <>\n    <p>There was problem retrieving Preview Api Key.</p>\n    <p>Did you provide correct Project Id? E.g. <a href={`${RootRoute}cf6c9bb2-6d7e-00f8-a84a-b8042d1209c6`}>cf6c9bb2-6d7e-00f8-a84a-b8042d1209c6</a></p>\n  </>\n);\n\nexport const ErrorPage: React.FunctionComponent<IErrorPageProps> = ({ type }) => (\n  <>\n    <p>Ooops, there was some error!</p>\n    {type === ErrorPageType.MissingProjectId && (\n      <MissingProjectIdErrorPageContent/>\n    )}\n\n    {type === ErrorPageType.UnableToGetPreviewApiKey && (\n      <UnableToGetPreviewApiKeyErrorPageContent/>\n    )}\n  </>\n);\n\n","\r\nimport { ContentItem, Fields } from 'kentico-cloud-delivery';\r\n\r\n/**\r\n * This class was generated by 'kentico-cloud-model-generator-utility' at Thu Jun 06 2019 14:16:39 GMT+0200 (GMT+02:00).\r\n *\r\n * Note: You can substitute 'ContentItem' type with another generated class. Generator doesn't have this information available\r\n * and so its up to you to define relationship between models.\r\n */\r\nexport class ArticleExampleContentType extends ContentItem {\r\n    public body!: Fields.RichTextField;\r\n    public title!: Fields.TextField;\r\n    public url!: Fields.UrlSlugField;\r\n}\r\n","\r\nimport { ContentItem, Fields } from 'kentico-cloud-delivery';\r\nimport {ProductExampleContentType} from \"./Product\";\r\n\r\n/**\r\n * This class was generated by 'kentico-cloud-model-generator-utility' at Thu Jun 06 2019 14:16:39 GMT+0200 (GMT+02:00).\r\n *\r\n * Note: You can substitute 'ContentItem' type with another generated class. Generator doesn't have this information available\r\n * and so its up to you to define relationship between models.\r\n */\r\nexport class LandingPageExampleContentType extends ContentItem {\r\n    public productList!: ProductExampleContentType[];\r\n    public title!: Fields.TextField;\r\n    public url!: Fields.UrlSlugField;\r\n    constructor() {\r\n        super({\r\n            propertyResolver: ((fieldName: string) => {\r\n                if (fieldName === 'product_list') {\r\n                    return 'productList';\r\n                }\r\n                return fieldName;\r\n            })\r\n        });\r\n    }\r\n}\r\n","\r\nimport { ContentItem, Fields } from 'kentico-cloud-delivery';\r\n\r\n/**\r\n * This class was generated by 'kentico-cloud-model-generator-utility' at Thu Jun 06 2019 14:16:39 GMT+0200 (GMT+02:00).\r\n *\r\n * Note: You can substitute 'ContentItem' type with another generated class. Generator doesn't have this information available\r\n * and so its up to you to define relationship between models.\r\n */\r\nexport class ProductExampleContentType extends ContentItem {\r\n    public description!: Fields.RichTextField;\r\n    public name!: Fields.TextField;\r\n    public image!: Fields.AssetsField;\r\n    public taxonomyCategorizingTargetAudience!: Fields.TaxonomyField;\r\n    constructor() {\r\n        super({\r\n            propertyResolver: ((fieldName: string) => {\r\n                if (fieldName === 'taxonomy___categorizing_target_audience') {\r\n                    return 'taxonomyCategorizingTargetAudience';\r\n                }\r\n                return fieldName;\r\n            })\r\n        });\r\n    }\r\n}\r\n","import {ArticleExampleContentType} from \"../models/Article\";\nimport {DeliveryClient, IDeliveryClient, TypeResolver} from \"kentico-cloud-delivery\";\nimport {LandingPageExampleContentType} from \"../models/LandingPage\";\nimport {ProductExampleContentType} from \"../models/Product\";\n\nlet deliveryClient: IDeliveryClient | null = null;\n\nconst ensureDeliveryClient = (projectId: string, previewApiKey: string): void => {\n  if (deliveryClient) {\n    return;\n  }\n\n  deliveryClient = new DeliveryClient({\n    enablePreviewMode: true,\n    enableAdvancedLogging: true,\n    previewApiKey,\n    projectId: projectId,\n    basePreviewUrl: process.env.REACT_APP_DELIVER_URL,\n    typeResolvers: [\n      new TypeResolver('article_example_content_type', () => new ArticleExampleContentType()),\n      new TypeResolver('landing_page_example_content_type', () => new LandingPageExampleContentType()),\n      new TypeResolver('product_example_content_type', () => new ProductExampleContentType()),\n    ],\n  });\n};\n\n\nexport const getAllArticles = (projectId: string, previewApiKey: string): Promise<Array<ArticleExampleContentType>> => {\n  ensureDeliveryClient(projectId, previewApiKey);\n  if (!deliveryClient) {\n    throw 'Delivery client is not initialized yet';\n  }\n\n  return deliveryClient.items<ArticleExampleContentType>()\n    .type('article_example_content_type')\n    .toPromise()\n    .then(response => {\n      return response.items;\n    })\n    .catch(reason => {\n      console.log(reason);\n      return new Array<ArticleExampleContentType>();\n    });\n};\n\nexport const getProductsPage = (projectId: string, previewApiKey: string): Promise<Array<LandingPageExampleContentType>> => {\n  ensureDeliveryClient(projectId, previewApiKey);\n  if (!deliveryClient) {\n    throw 'Delivery client is not initialized yet';\n  }\n\n  return deliveryClient.items<LandingPageExampleContentType>()\n    .type('landing_page_example_content_type')\n    .toPromise()\n    .then(response => {\n      return response.items;\n    })\n    .catch(reason => {\n      console.log(reason);\n      return new Array<LandingPageExampleContentType>();\n    });\n};\n","import React from 'react';\nimport {LoadingStatus} from \"../enums/LoadingStatus\";\nimport {getAllArticles, getProductsPage} from \"../repositories/contentItemRepository\";\nimport {ArticleExampleContentType} from \"../models/Article\";\nimport {ProductExampleContentType} from \"../models/Product\";\nimport {clearInterval, setInterval} from \"timers\";\n\ninterface IAppContextState {\n  readonly dataLoadingStatus: LoadingStatus;\n  readonly previewApiKey: string;\n  readonly previewApiKeyLoadingStatus: LoadingStatus;\n  readonly projectId: string;\n  readonly projectIdLoadingStatus: LoadingStatus;\n  readonly pages: Array<ArticleExampleContentType>;\n  readonly products: Array<ProductExampleContentType>;\n}\n\ninterface IAppContextProps {\n  readonly loadWelcomePage: () => void;\n  readonly loadProducts: () => void;\n\n  readonly setProjectId: (projectId: string) => void;\n  readonly setLoadingStatus: (loadingStatus: LoadingStatus) => void;\n  readonly setProjectIdLoadingStatus: (projectIdLoadingStatus: LoadingStatus) => void;\n  readonly setPreviewApiKey: (previewApiKey: string) => void;\n  readonly setPreviewApiKeyLoadingStatus: (previewApiKeyLoadingStatus: LoadingStatus) => void;\n}\n\nexport interface IAppContext extends IAppContextState, IAppContextProps {\n}\n\nconst defaultAppContext: IAppContext = {\n  dataLoadingStatus: LoadingStatus.NotLoaded,\n  previewApiKey: '',\n  previewApiKeyLoadingStatus: LoadingStatus.NotLoaded,\n  projectId: '',\n  projectIdLoadingStatus: LoadingStatus.NotLoaded,\n  pages: new Array<ArticleExampleContentType>(),\n  products: new Array<ProductExampleContentType>(),\n  loadWelcomePage: () => undefined,\n  loadProducts: () => undefined,\n  setProjectId: () => undefined,\n  setLoadingStatus: () => undefined,\n  setProjectIdLoadingStatus: () => undefined,\n  setPreviewApiKey: () => undefined,\n  setPreviewApiKeyLoadingStatus: () => undefined,\n};\n\nconst context = React.createContext<IAppContext>(defaultAppContext);\nconst AppContextProvider = context.Provider;\n\nexport const AppContextConsumer = context.Consumer;\n\nexport class AppContext extends React.PureComponent<{}, IAppContextState> {\n\n  readonly state = {\n    dataLoadingStatus: LoadingStatus.NotLoaded,\n    previewApiKey: '',\n    previewApiKeyLoadingStatus: LoadingStatus.NotLoaded,\n    projectId: '',\n    projectIdLoadingStatus: LoadingStatus.NotLoaded,\n    pages: new Array<ArticleExampleContentType>(),\n    products: new Array<ProductExampleContentType>(),\n  };\n\n  private _dataPollingTimer: NodeJS.Timer | null = null;\n\n  private _setDataPolling = (func: () => void): void => {\n    if (this._dataPollingTimer !== null) {\n      clearInterval(this._dataPollingTimer);\n    }\n\n    this._dataPollingTimer = setInterval(func, 3000);\n  };\n\n  setProjectId = (projectId: string) => {\n    this.setState({ projectId });\n  };\n\n  setLoadingStatus = (loadingStatus: LoadingStatus) => {\n    this.setState({ dataLoadingStatus: loadingStatus })\n  };\n\n  setProjectIdLoadingStatus = (projectIdLoadingStatus: LoadingStatus) => {\n    this.setState({ projectIdLoadingStatus });\n  };\n\n  setPreviewApiKey = (previewApiKey: string) => {\n    this.setState({ previewApiKey });\n  };\n\n  setPreviewApiKeyLoadingStatus = (previewApiKeyLoadingStatus: LoadingStatus) => {\n    this.setState({ previewApiKeyLoadingStatus });\n  };\n\n  private _loadWelcomePageData = async () => {\n    const articles = await getAllArticles(this.state.projectId, this.state.previewApiKey);\n    this.setState({ pages: articles });\n  };\n\n  loadWelcomePage = async () => {\n    this._setDataPolling(this._loadWelcomePageData);\n    await this._loadWelcomePageData();\n  };\n\n  private _loadProductsData = async () => {\n    const productsPage = await getProductsPage(this.state.projectId, this.state.previewApiKey);\n    if (productsPage && productsPage[0]) {\n      this.setState({ products: productsPage[0].productList });\n    }\n  };\n\n  loadProducts = async () => {\n    this._setDataPolling(this._loadProductsData);\n    await this._loadProductsData();\n  };\n\n  render() {\n    const { products, pages, projectId, dataLoadingStatus, projectIdLoadingStatus, previewApiKey, previewApiKeyLoadingStatus } = this.state;\n    const contextValue: IAppContext = {\n      dataLoadingStatus,\n      previewApiKey,\n      previewApiKeyLoadingStatus,\n      projectId,\n      projectIdLoadingStatus,\n      pages,\n      products,\n      loadWelcomePage: this.loadWelcomePage,\n      loadProducts: this.loadProducts,\n      setProjectId: this.setProjectId,\n      setLoadingStatus: this.setLoadingStatus,\n      setProjectIdLoadingStatus: this.setProjectIdLoadingStatus,\n      setPreviewApiKey: this.setPreviewApiKey,\n      setPreviewApiKeyLoadingStatus: this.setPreviewApiKeyLoadingStatus,\n    };\n\n    return (\n      <AppContextProvider value={contextValue}>\n        {this.props.children}\n      </AppContextProvider>\n    );\n  }\n}\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './NavigationBar.css';\r\nimport {\r\n  ProductsRoute,\r\n  ProjectRoute,\r\n  ProjectRouteParams,\r\n} from '../constants/routePaths';\r\nimport {AuthContextConsumer} from \"../context/AuthContext\";\r\nimport {buildPath} from \"../utils/routeTransitionUtils\";\r\nimport {AppContextConsumer} from \"../context/AppContext\";\r\n\r\nexport class NavigationBar extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <AppContextConsumer>\r\n        {appContext => (\r\n          <AuthContextConsumer>\r\n            {authContext => (\r\n              <div className=\"navigation-bar\">\r\n                <nav className=\"navigation-bar__app-menu\">\r\n                  <Link className=\"navigation-bar__app-menu-button\" to={buildPath<ProjectRouteParams>(ProjectRoute, { projectId: appContext.projectId })}>Welcome</Link>\r\n                  <Link className=\"navigation-bar__app-menu-button\" to={buildPath<ProjectRouteParams>(ProductsRoute, { projectId: appContext.projectId })}>Products</Link>\r\n                </nav>\r\n                <div className=\"navigation-bar__user-menu\">\r\n                  <button className=\"navigation-bar__user-menu-button\" onClick={authContext.logout}>Logout</button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </AuthContextConsumer>\r\n        )}\r\n      </AppContextConsumer>\r\n    )\r\n  }\r\n}\r\n\r\n","import React from 'react';\r\n\r\nexport interface IPageContentProps {\r\n  readonly title: string;\r\n}\r\n\r\nexport const PageContent: React.FunctionComponent<IPageContentProps> = ({ title, children }) => (\r\n  <>\r\n    <div className=\"app-title\">\r\n      {title}\r\n    </div>\r\n    <div className=\"app-content\">\r\n      {children}\r\n    </div>\r\n  </>\r\n);\r\n","import React from 'react';\nimport {\n  AppContextConsumer,\n} from '../../context/AppContext';\nimport './ProductDetailsPage.css';\nimport {ProductDetailsRouteParams} from \"../../constants/routePaths\";\nimport {ProductExampleContentType} from \"../../models/Product\";\nimport {PageContent} from \"../PageContent\";\n\ninterface IProductDetailsPage {\n  readonly product: ProductExampleContentType;\n  readonly init: () => void;\n}\n\nclass ProductDetailsPage extends React.PureComponent<IProductDetailsPage> {\n  componentDidMount(): void {\n    this.props.init();\n  }\n\n  render() {\n    const { product } = this.props;\n    if (product) {\n      const pictureUrl = product.image.assets[0] ? product.image.assets[0].url : '';\n      return (\n        <PageContent title={product.name.value}>\n          {pictureUrl && (\n            <img\n              className=\"product-details__image\"\n              alt={product.name.value}\n              src={product.image.assets[0] ? product.image.assets[0].url : ''}\n            />\n          )}\n\n          <div\n            className=\"product-details__description\"\n            dangerouslySetInnerHTML={{ __html: product.description.getHtml() }}\n          />\n        </PageContent>);\n    }\n\n    return null;\n  }\n}\n\ninterface IProductDetailsPageConnectedProps {\n  readonly match: {\n    readonly params: ProductDetailsRouteParams;\n  };\n}\n\nconst ProductDetailsPageConnected: React.FunctionComponent<IProductDetailsPageConnectedProps> = ({ match }) => (\n  <AppContextConsumer>\n    {appContext => (\n      <ProductDetailsPage\n        product={appContext.products.filter(product => product.system.codename === match.params.productId)[0]}\n        init={appContext.loadProducts}\n      />\n    )}\n  </AppContextConsumer>\n);\n\nexport { ProductDetailsPageConnected as ProductDetailsPage }\n","import {Link} from \"react-router-dom\";\nimport {buildPath} from \"../../utils/routeTransitionUtils\";\nimport {ProductDetailsRoute, ProductDetailsRouteParams} from \"../../constants/routePaths\";\nimport React from \"react\";\nimport './ProductCard.css';\n\ninterface IProductCardProps {\n  readonly projectId: string;\n  readonly productId: string;\n  readonly title: string;\n  readonly pictureUrl: string;\n}\n\nexport const ProductCard: React.FunctionComponent<IProductCardProps> =\n  ({ projectId, productId, pictureUrl, title }) => {\n    return (\n      <div className=\"product-card\">\n        <Link to={buildPath<ProductDetailsRouteParams>(ProductDetailsRoute, { projectId, productId })}>\n          {pictureUrl && (\n            <img\n              className=\"product-card__thumbnail\"\n              src={pictureUrl}\n              alt=\"product thumbnail\"\n            />\n          )}\n          {title}\n        </Link>\n      </div>\n    );\n};\n","import React from 'react';\nimport {\n  AppContextConsumer,\n} from '../../context/AppContext';\nimport { PageContent } from '../PageContent';\nimport './ProductsPage.css';\nimport {ProductExampleContentType} from \"../../models/Product\";\nimport {ProductCard} from \"./ProductCard\";\n\ninterface IProductsPageProps {\n  readonly init: () => void;\n  readonly projectId: string;\n  readonly products: Array<ProductExampleContentType>;\n}\n\nclass ProductsPage extends React.PureComponent<IProductsPageProps> {\n  componentDidMount(): void {\n    this.props.init();\n  }\n\n  render() {\n    const { projectId, products } = this.props;\n    return (\n      <PageContent title=\"Products\">\n        <div className=\"product-list\">\n          {products.map((product: ProductExampleContentType) => (\n            <ProductCard\n              title={product.name.value}\n              pictureUrl={product.image.assets[0] ? product.image.assets[0].url : ''}\n              productId={product.system.codename}\n              projectId={projectId}\n              key={product.system.id}\n            />)\n          )}\n        </div>\n      </PageContent>\n    );\n  }\n}\n\nconst ProductsPageConnected = () => (\n  <AppContextConsumer>\n    {appContext => (\n      <ProductsPage\n        init={appContext.loadProducts}\n        projectId={appContext.projectId}\n        products={appContext.products}\n      />\n    )}\n  </AppContextConsumer>\n);\n\nexport { ProductsPageConnected as ProductsPage };\n","import React from 'react';\r\nimport {\r\n  AppContextConsumer\r\n} from '../context/AppContext';\r\nimport { PageContent } from './PageContent';\r\nimport {ArticleExampleContentType} from \"../models/Article\";\r\n\r\ninterface IWelcomePageProps {\r\n  readonly pages: Array<ArticleExampleContentType>;\r\n  readonly init: () => void;\r\n}\r\n\r\nclass WelcomePage extends React.PureComponent<IWelcomePageProps> {\r\n  componentDidMount(): void {\r\n    this.props.init();\r\n  }\r\n\r\n  render() {\r\n    const page = this.props.pages[0];\r\n    if (page) {\r\n      return (\r\n        <PageContent title={page.title.value}>\r\n          <div dangerouslySetInnerHTML={{ __html: page.body.getHtml() }} />\r\n        </PageContent>\r\n      );\r\n    }\r\n\r\n    return <p>Missing data for Welcome page</p>;\r\n  }\r\n}\r\n\r\nconst WelcomePageConnected = () => (\r\n  <AppContextConsumer>\r\n    {appContext => (\r\n      <WelcomePage\r\n        pages={appContext.pages}\r\n        init={appContext.loadWelcomePage} />\r\n    )}\r\n  </AppContextConsumer>\r\n);\r\n\r\nexport { WelcomePageConnected as WelcomePage }\r\n","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  Route,\r\n  Switch,\r\n} from 'react-router-dom';\r\nimport { NavigationBar } from './components/NavigationBar';\r\nimport { ProductDetailsPage } from './components/Product/ProductDetailsPage';\r\nimport {\r\n  ProductsPage,\r\n} from './components/Product/ProductsPage';\r\nimport {\r\n  ProductDetailsRoute,\r\n  ProductsRoute,\r\n  ProjectRoute,\r\n} from './constants/routePaths';\r\nimport {WelcomePage} from \"./components/WelcomePage\";\r\n\r\nexport class App extends React.PureComponent {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Route\r\n          path={ProjectRoute}\r\n          component={NavigationBar}\r\n        />\r\n        <div className=\"app-content-wrapper\">\r\n          <Switch>\r\n            <Route\r\n              path={ProjectRoute}\r\n              exact\r\n              component={WelcomePage}\r\n            />\r\n            <Route\r\n              path={ProductDetailsRoute}\r\n              component={ProductDetailsPage}\r\n            />\r\n            <Route\r\n              path={ProductsRoute}\r\n              component={ProductsPage}\r\n            />\r\n            <Route\r\n              render={() => (\r\n                <p>Ooops, missing page!</p>\r\n              )}\r\n            />\r\n          </Switch>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export type CustomHeaders = {\r\n  [key: string]: string,\r\n};\r\n\r\nexport type RequestType =\r\n  'GET'\r\n  | 'POST'\r\n  | 'PUT'\r\n  | 'DELETE'\r\n  | 'PATCH';\r\n\r\nexport type ProgressCallback = (event: {\r\n  loaded: number;\r\n  total: number;\r\n}) => void;\r\n\r\nexport interface ICreateAjax {\r\n  request: (type: RequestType, url: string, data: any, customHeaders?: CustomHeaders) => Promise<XMLHttpRequest>;\r\n  requestFile: (type: RequestType, url: string, data: any, customHeaders?: CustomHeaders) => Promise<XMLHttpRequest>;\r\n  upload: (url: string, formData: FormData, uploadProgressCallback: ProgressCallback, customHeaders?: CustomHeaders) => Promise<XMLHttpRequest>;\r\n}\r\n\r\nfunction createAjax(withCredentials: any): ICreateAjax {\r\n  return {\r\n    /**\r\n     * Attempts to parse the response as JSON otherwise returns it untouched.\r\n     *\r\n     * @param {string} type The HTTP verb to be used.\r\n     * @param {string} url The url for the XHR request.\r\n     * @param {object} data Optional. The data to be passed with a POST or PUT request.\r\n     * @param {object} customHeaders Optional. Custom headers to be included in a request.\r\n     *\r\n     * @memberof ajax\r\n     */\r\n    request(type: RequestType, url: string, data: any, customHeaders?: CustomHeaders): Promise<XMLHttpRequest> {\r\n      return new Promise<XMLHttpRequest>(resolve => {\r\n        const request = getNewEmptyRequest();\r\n\r\n        request.open(type, url, true);\r\n        request.withCredentials = withCredentials;\r\n\r\n        addCustomHeaders(request, customHeaders);\r\n\r\n        request.onreadystatechange = () => {\r\n          if (request.readyState === 4) {\r\n            resolve(request);\r\n          }\r\n        };\r\n\r\n        request.send(data);\r\n      });\r\n    },\r\n\r\n    requestFile(type: RequestType, url: string, data: any, customHeaders?: CustomHeaders): Promise<XMLHttpRequest> {\r\n      return new Promise<XMLHttpRequest>(resolve => {\r\n        const request = getNewEmptyRequest();\r\n\r\n        request.open(type, url, true);\r\n        request.responseType = 'blob';\r\n        request.withCredentials = withCredentials;\r\n\r\n        addCustomHeaders(request, customHeaders);\r\n\r\n        request.onreadystatechange = () => {\r\n          if (request.readyState === 4) {\r\n            resolve(request);\r\n          }\r\n        };\r\n\r\n        request.send(data);\r\n      });\r\n    },\r\n\r\n    upload(url: string, formData: FormData, uploadProgressCallback: ProgressCallback, customHeaders?: CustomHeaders): Promise<XMLHttpRequest> {\r\n      return new Promise(resolve => {\r\n        const request = getNewEmptyRequest();\r\n\r\n        request.open('POST', url, true);\r\n\r\n        addCustomHeaders(request, customHeaders);\r\n\r\n        request.onreadystatechange = () => {\r\n          if (request.readyState === 4) {\r\n            resolve(request);\r\n          }\r\n        };\r\n\r\n        request.upload.addEventListener('progress', uploadProgressCallback);\r\n        request.send(formData);\r\n      });\r\n    },\r\n  };\r\n}\r\n\r\nfunction addCustomHeaders(request: XMLHttpRequest, customHeaders?: CustomHeaders) {\r\n  if (customHeaders) {\r\n    Object.keys(customHeaders).forEach((header) => {\r\n      const value = customHeaders[header];\r\n      if (header && value) {\r\n        request.setRequestHeader(header, value);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction getNewEmptyRequest(): XMLHttpRequest {\r\n  // if (XMLHttpRequest) {\r\n  return new XMLHttpRequest();\r\n  // }\r\n  // else {\r\n  //   // Set ajax to correct XHR type. Source: https://gist.github.com/jed/993585\r\n  //   return new XMLHttpRequest();\r\n  //   //return new ActiveXObject('MSXML2.XMLHTTP.3.0');\r\n  // }\r\n}\r\n\r\nexport function createAjaxWithCredentials(): ICreateAjax {\r\n  return createAjax(true);\r\n}\r\n\r\n// export function createAjaxWithoutCredentials(): ICreateAjax {\r\n//   return createAjax(false);\r\n// }\r\n","import { RequestType } from './ajax';\r\n\r\nexport interface IRequestContext {\r\n  readonly appInstanceId?: string;\r\n  readonly authToken?: string;\r\n}\r\n\r\nexport type CustomHeaders = {\r\n  [key: string]: string,\r\n};\r\n\r\n\r\nfunction getAuthHeader(accessToken: string): CustomHeaders {\r\n  return { Authorization: `Bearer ${accessToken}` };\r\n}\r\n\r\nfunction getHeaders(defaultHeaders: CustomHeaders, requestContext?: IRequestContext): CustomHeaders {\r\n  if (!requestContext) {\r\n    return defaultHeaders;\r\n  }\r\n\r\n  const newHeaders = requestContext.authToken ? getAuthHeader(requestContext.authToken) : {};\r\n\r\n  if (requestContext.appInstanceId) {\r\n    newHeaders['X-AppInstanceId'] = requestContext.appInstanceId;\r\n  }\r\n\r\n  return { ...defaultHeaders, ...newHeaders };\r\n}\r\n\r\nexport function createRestProvider(ajax: any) {\r\n  function makeRequest(httpVerb: RequestType, url: string, data: any, requestContext?: IRequestContext): Promise<XMLHttpRequest> {\r\n    const headers = getHeaders(\r\n      { 'Content-type': 'application/json' },\r\n      requestContext,\r\n    );\r\n\r\n    const requestBody = data ? prepareDataForSend(data) : null;\r\n    return ajax.request(httpVerb, url, requestBody, headers);\r\n  }\r\n\r\n  // function makeFileRequest(httpVerb: RequestType, url: string, data: any, requestContext?: IRequestContext): Promise<XMLHttpRequest> {\r\n  //   const headers = getHeaders(\r\n  //     { 'Content-type': 'application/octet-stream' },\r\n  //     requestContext,\r\n  //   );\r\n  //\r\n  //   const requestBody = data ? prepareDataForSend(data) : null;\r\n  //   return ajax.requestFile(httpVerb, url, requestBody, headers);\r\n  // }\r\n\r\n  return {\r\n    // get(url: string, queryParameters: QueryStringParams | null, requestContext?: IRequestContext): Promise<any> {\r\n    //   const urlWithQueryParams = url + (queryParameters ? buildUrlQueryString(queryParameters) : '');\r\n    //\r\n    //   return makeRequest('GET', urlWithQueryParams, null, requestContext)\r\n    //     .then(verifyStatusCode([200]))\r\n    //     .then(parseResponse);\r\n    // },\r\n    //\r\n    // getFile(url: string, queryParameters: QueryStringParams | null, requestContext?: IRequestContext): Promise<any> {\r\n    //   const urlWithQueryParams = url + (queryParameters ? buildUrlQueryString(queryParameters) : '');\r\n    //\r\n    //   return makeFileRequest('GET', urlWithQueryParams, null, requestContext)\r\n    //     .then(response => response.response);\r\n    // },\r\n\r\n    post(url: string, data: any, requestContext?: IRequestContext): Promise<any> {\r\n      return makeRequest('POST', url, data, requestContext)\r\n        .then(verifyStatusCode([200, 201]))\r\n        .then(parseResponse);\r\n    },\r\n\r\n    // put(url: string, data: any, requestContext?: IRequestContext): Promise<any> {\r\n    //   return makeRequest('PUT', url, data, requestContext)\r\n    //     .then(verifyStatusCode([200, 201]))\r\n    //     .then(parseResponse);\r\n    // },\r\n    //\r\n    // patch(url: string, data: any, requestContext?: IRequestContext): Promise<any> {\r\n    //   return makeRequest('PATCH', url, data, requestContext)\r\n    //     .then(verifyStatusCode([200]))\r\n    //     .then(parseResponse);\r\n    // },\r\n    //\r\n    // delete(url: string, requestContext?: IRequestContext): Promise<any> {\r\n    //   return makeRequest('DELETE', url, null, requestContext)\r\n    //     .then(verifyStatusCode([200, 204]))\r\n    //     .then(parseResponse);\r\n    // },\r\n    //\r\n    // upload(url: string, file: any, metadata: any, uploadProgressCallback: ProgressCallback, requestContext?: IRequestContext) {\r\n    //   const headers = getHeaders({}, requestContext);\r\n    //\r\n    //   const formData = new FormData();\r\n    //   formData.append(file.name, file);\r\n    //   formData.append('metadata', JSON.stringify(metadata));\r\n    //\r\n    //   return ajax.upload(url, formData, uploadProgressCallback, headers)\r\n    //     .then(verifyStatusCode([201]))\r\n    //     .then(parseResponse);\r\n    // },\r\n  };\r\n}\r\n\r\nfunction prepareDataForSend(data: any): any {\r\n  if (data && typeof data === 'object') {\r\n    // const dto = toDTO(data);\r\n    // return JSON.stringify(dto);\r\n  }\r\n  else if (typeof data === 'string') {\r\n    return JSON.stringify(data);\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction verifyStatusCode(validStatusCodes: number[]) {\r\n  return (response: XMLHttpRequest) => {\r\n    if (validStatusCodes.indexOf(response.status) >= 0) {\r\n      return response;\r\n    }\r\n    else {\r\n      throw response;\r\n    }\r\n  };\r\n}\r\n\r\nfunction parseResponse(response: XMLHttpRequest) {\r\n  // it might be empty string which can't be parsed by JSON.parse\r\n  if (!response.responseText) {\r\n    return null;\r\n  }\r\n  return JSON.parse(response.responseText);\r\n}","import { createAjaxWithCredentials } from '../utils/ajax';\nimport {\n  createRestProvider,\n  IRequestContext,\n} from '../utils/restProvider';\n\nconst restProvider = createRestProvider(createAjaxWithCredentials());\n\nexport interface IPreviewApiKey {\n  readonly api_key: string;\n  readonly expiresAt: string;\n}\n\nexport const getPreviewApiKey = (authToken: string, projectId: string): Promise<IPreviewApiKey> => {\n  const requestContext: IRequestContext = {\n    authToken: authToken,\n  };\n  const url = `${process.env.REACT_APP_KENTICO_CLOUD_URL}/api/project-management/${projectId}/keys/preview-delivery-api-primary`;\n  return restProvider.post(url, null, requestContext);\n};\n","import {matchPath} from \"react-router\";\nimport {DeployedProjectRootRoute, ProjectRoute, ProjectRouteParams} from \"../constants/routePaths\";\n\nexport const getProjectIdFromUrl = (): string | null => {\n  console.log(`get project id from url (${window.location})`);\n  if (window.location) {\n    const routeToMatch = DeployedProjectRootRoute + ProjectRoute + \"*\";\n    console.log('route to match:', routeToMatch);\n    const match = matchPath<ProjectRouteParams>(window.location.pathname, routeToMatch);\n    if (match) {\n      console.log('got projectId from url: ', match.params.projectId);\n      return match.params.projectId;\n    } else {\n      console.log('no projectId in url');\n    }\n  }\n\n  return null;\n};\n","import {getPreviewApiKey, IPreviewApiKey} from \"../repositories/previewApiKeyRepository\";\nimport {IAuthContext} from \"../context/AuthContext\";\nimport {IAppContext} from \"../context/AppContext\";\nimport {LoadingStatus} from \"../enums/LoadingStatus\";\nimport {getProjectIdFromUrl} from \"./projectIdUtil\";\n\ninterface ILoadPreviewApiKeyDeps {\n  readonly appContext: IAppContext;\n  readonly authContext: IAuthContext;\n  readonly getPreviewApiKey: (authToken: string, projectId: string) => Promise<IPreviewApiKey>;\n}\n\nexport const createLoadPreviewApiKey = (props: ILoadPreviewApiKeyDeps): () => Promise<string | null> => {\n  const { accessToken } = props.authContext;\n  const { projectId } = props.appContext;\n  return () => getPreviewApiKey(accessToken, projectId)\n    .then((response: IPreviewApiKey) => {\n      return response.api_key;\n    })\n    .catch(() => {\n      return null;\n    })\n};\n\nexport const createFetchData = () => (): string => {\n  return \"have some data\";\n};\n\ninterface ILoadApplicationDataDeps {\n  readonly appContext: IAppContext;\n  readonly authContext: IAuthContext;\n  readonly fetchData: () => string;\n  readonly loadPreviewApikey: () => Promise<string | null>;\n}\n\nexport const createLoadApplicationData = (deps: ILoadApplicationDataDeps) => async (): Promise<void> => {\n  const { appContext, loadPreviewApikey, fetchData } = deps;\n  if (appContext.projectIdLoadingStatus === LoadingStatus.NotLoaded) {\n    const projectIdFromUrl = getProjectIdFromUrl();\n    if (projectIdFromUrl) {\n      appContext.setProjectId(projectIdFromUrl);\n      appContext.setProjectIdLoadingStatus(LoadingStatus.Finished);\n    } else {\n      appContext.setProjectIdLoadingStatus(LoadingStatus.Failed);\n    }\n  }\n\n  if (appContext.projectIdLoadingStatus === LoadingStatus.Finished && appContext.previewApiKeyLoadingStatus === LoadingStatus.NotLoaded) {\n    appContext.setPreviewApiKeyLoadingStatus(LoadingStatus.InProgress);\n    const previewApiKey = await loadPreviewApikey();\n    if (previewApiKey) {\n      appContext.setPreviewApiKey(previewApiKey);\n      appContext.setPreviewApiKeyLoadingStatus(LoadingStatus.Finished);\n    }\n    else {\n      appContext.setPreviewApiKeyLoadingStatus(LoadingStatus.Failed);\n    }\n  }\n\n  if (appContext.previewApiKeyLoadingStatus === LoadingStatus.Finished && appContext.dataLoadingStatus === LoadingStatus.NotLoaded) {\n    appContext.setLoadingStatus(LoadingStatus.InProgress);\n    const data = fetchData();\n    appContext.setLoadingStatus(LoadingStatus.Finished);\n  }\n};\n","import React from 'react';\r\nimport {RouteComponentProps, withRouter} from \"react-router\";\r\nimport {AuthContextConsumer, IAuthContext} from \"./AuthContext\";\r\nimport {AppContextConsumer, IAppContext} from \"./AppContext\";\r\nimport {Callback} from \"../components/Callback\";\r\n\r\nimport {ErrorPage, ErrorPageType} from \"../components/ErrorPage\";\r\nimport {createFetchData, createLoadApplicationData, createLoadPreviewApiKey} from \"../utils/previewApiKeyUtils\";\r\nimport {getPreviewApiKey} from \"../repositories/previewApiKeyRepository\";\r\nimport {LoadingStatus} from \"../enums/LoadingStatus\";\r\n\r\ninterface IAppContextInitializationProps extends RouteComponentProps {\r\n  readonly authContext: IAuthContext;\r\n  readonly appContext: IAppContext;\r\n  readonly loadApplicationData: () => void;\r\n}\r\n\r\nclass AppContextInitialization extends React.PureComponent<IAppContextInitializationProps, {}> {\r\n\r\n  componentDidUpdate(prevProps: IAppContextInitializationProps): void {\r\n    // todo solve\r\n    this.props.loadApplicationData();\r\n  }\r\n\r\n  render() {\r\n    const { projectIdLoadingStatus, previewApiKeyLoadingStatus, dataLoadingStatus } = this.props.appContext;\r\n    if (projectIdLoadingStatus === LoadingStatus.Failed) {\r\n      return <ErrorPage type={ErrorPageType.MissingProjectId}/>\r\n    }\r\n\r\n    if (previewApiKeyLoadingStatus === LoadingStatus.Failed) {\r\n      return <ErrorPage type={ErrorPageType.UnableToGetPreviewApiKey}/>\r\n    }\r\n\r\n    if (dataLoadingStatus === LoadingStatus.Finished) {\r\n      return this.props.children;\r\n    }\r\n\r\n    return <Callback/>\r\n  }\r\n}\r\n\r\nconst AppContextInitializationConnected = (props: RouteComponentProps) => (\r\n  <AppContextConsumer>\r\n    {appContext => (\r\n      <AuthContextConsumer>\r\n        {authContext => {\r\n          const loadApplicationData = createLoadApplicationData({\r\n            appContext,\r\n            authContext,\r\n            fetchData: createFetchData(),\r\n            loadPreviewApikey: createLoadPreviewApiKey({\r\n              authContext,\r\n              appContext,\r\n              getPreviewApiKey: getPreviewApiKey,\r\n            })\r\n          });\r\n          return (<AppContextInitialization\r\n            loadApplicationData={loadApplicationData}\r\n            authContext={authContext}\r\n            appContext={appContext}\r\n            {...props}\r\n          />);\r\n        }}\r\n      </AuthContextConsumer>\r\n    )}\r\n  </AppContextConsumer>\r\n);\r\n\r\nconst AppContextInitializationWithRouter = withRouter<RouteComponentProps>(AppContextInitializationConnected);\r\nexport { AppContextInitializationWithRouter as AppContextInitialization };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { AppContext } from \"./context/AppContext\";\nimport { AuthContext } from \"./context/AuthContext\";\nimport {AppContextInitialization} from \"./context/AppContextInitialization\";\nimport {DeployedProjectRootRoute} from \"./constants/routePaths\";\n\nReactDOM.render(\n  <Router basename={DeployedProjectRootRoute}>\n    <AuthContext>\n      <AppContext>\n        <AppContextInitialization>\n          <App/>\n        </AppContextInitialization>\n      </AppContext>\n    </AuthContext>\n  </Router>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}